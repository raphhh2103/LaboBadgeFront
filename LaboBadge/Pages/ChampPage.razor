@page "/Champ"
@inject Utils.SessionStorageAccessor _sessionStorage
@inject LaboBadge.Services.ChampServices _champService
@inject LaboBadge.Services.BasicStatisticServices _basicStatisticService
@inject NavigationManager uriHelper;
@using LaboBadge.Pages
@using LaboBadge.Services
@using LaboBadge.Models
@using LaboBadge.Utils

<h3>ChampPage</h3>

<ReloadChampPage></ReloadChampPage>
@code {
/*
    public Champ[]? champs;
    public Skills[]? skills;
    public string tkn;
    public BasicStatistic[] basicStatistic;
    public async Task AllChampCall()
    {
        tkn = await _sessionStorage.GetValueAsync<string>("token");
        //Champ ch = new Champ()
        //    {
        //        Name = " theodor",
        //        Affinity = new AffinityChamp(),
        //        BasicsStatisticsId = 3,
        //        @Skills = new Skills[0]
        //    };
        //champs = new Champ[] { ch };
        Console.WriteLine(tkn);
        champs = await _champService.GetAllChamp(tkn);
        Console.WriteLine(champs.Length);
        await GetStat();

    }
    private async Task GetStat()
    {
        basicStatistic = new BasicStatistic[champs.Length - 1];
        for (int i = 0; i < champs.Length; i++)
        {

            //if (champs[i].BasicsStatisticsId == 0)
            //{
            //    await _champService.WaitAndSee();
            //}

            Console.WriteLine(i + " iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii");
            basicStatistic[i] = await /*Task.Run(()=>*/// _basicStatisticService.GetOne(tkn, champs[i].BasicsStatisticsId)/*)*/;
        }
@*
    }
    // protected override async Task OnInitializedAsync() => await Task.Run(() => this.AllChampCall()) /*=> await Task.Run(()=>GetStat())*/;
    //protected override async Task OnInitializedAsync() => await Task.Run(() => this.AllChampCall()) => await Task.Run(()=>GetStat());
    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        var timer = new Timer(new TimerCallback(_ =>
    //        {
    //            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    //        }), null, 2000, 2000);
    //    }
    //}


}*@

 